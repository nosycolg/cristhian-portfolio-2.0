export function generateContextualResponse(userInput: string, chatType: string): string {
	const input = userInput.toLowerCase();

	const responses = {
		general: {
			greeting: [
				"**Ol√°!** Como posso ajudar voc√™ hoje?\n\n*Estou aqui para responder suas perguntas sobre qualquer assunto.*",
				"**Oi!** Estou aqui para responder suas perguntas.\n\n**Posso ajudar com:**\n- Explica√ß√µes gerais\n- D√∫vidas t√©cnicas\n- Informa√ß√µes diversas",
				"**Ol√°!** Em que posso ser √∫til?\n\n> *Dica: Posso explicar conceitos, ajudar com problemas ou simplesmente conversar!*",
			],
			programming: [
				"**Sobre programa√ß√£o**, posso ajudar com:\n\n- üêõ **Debugging** e corre√ß√£o de erros\n- üìö **Conceitos** e explica√ß√µes\n- ‚ö° **Boas pr√°ticas** de desenvolvimento\n\nQual sua d√∫vida espec√≠fica?",
				"**Desenvolvimento √© minha √°rea!** \n\nPode compartilhar:\n- C√≥digo que precisa de ajuda\n- Conceitos que quer entender\n- Problemas que est√° enfrentando",
			],
			default: [
				"**Interessante pergunta!** \n\nBaseado no que voc√™ disse, sugiro explorarmos esse t√≥pico mais a fundo.\n\n*Como posso ajudar especificamente?*",
				"**Entendo sua quest√£o.** \n\nVou fazer o meu melhor para ajudar com informa√ß√µes √∫teis e claras.\n\n**Precisa de mais detalhes sobre algum aspecto espec√≠fico?**",
				"**Boa pergunta!** \n\nDeixe-me organizar uma resposta clara para voc√™.\n\n> *Sinta-se √† vontade para fazer perguntas de acompanhamento!*",
			],
		},
		code: {
			javascript: [
				"**JavaScript √© uma linguagem vers√°til!** \n\nPara seu caso, recomendo:\n\n```javascript\n// Use const/let ao inv√©s de var\nconst minhaVariavel = 'valor';\n\n// Arrow functions para melhor legibilidade\nconst minhaFuncao = () => {\n  // seu c√≥digo aqui\n};\n```\n\n**Dicas importantes:**\n- Sempre valide dados de entrada\n- Use `try/catch` para tratamento de erros",
				"**Em JavaScript**, considere estas **boas pr√°ticas**:\n\n1. **Tipagem**: Use TypeScript quando poss√≠vel\n2. **Async/Await**: Para opera√ß√µes ass√≠ncronas\n3. **Destructuring**: Para c√≥digo mais limpo\n\n```javascript\n// Exemplo de destructuring\nconst { nome, idade } = usuario;\n```",
			],
			react: [
				"**No React**, lembre-se de:\n\n**Hooks essenciais:**\n- `useState` para estado local\n- `useEffect` para efeitos colaterais\n- `useCallback` para otimiza√ß√£o\n\n```jsx\nconst MeuComponente = () => {\n  const [estado, setEstado] = useState(valorInicial);\n  \n  return <div>{estado}</div>;\n};\n```\n\n**Dica:** Mantenha componentes pequenos e reutiliz√°veis!",
				"**Para React**, considere:\n\n**TypeScript** para melhor tipagem:\n```tsx\ninterface Props {\n  titulo: string;\n  ativo: boolean;\n}\n\nconst Componente: React.FC<Props> = ({ titulo, ativo }) => {\n  return <h1>{titulo}</h1>;\n};\n```\n\n**Evita bugs em produ√ß√£o!**",
			],
			default: [
				"**Para esse problema de c√≥digo**, sugiro:\n\n1. ‚úÖ **Verificar a sintaxe**\n2. üß™ **Testar com dados simples**\n3. üêõ **Usar `console.log` para debug**\n\n```javascript\nconsole.log('Debug:', minhaVariavel);\n```\n\n**Precisa de ajuda espec√≠fica com algum erro?**",
				'**Boas pr√°ticas incluem:**\n\n- üßπ **C√≥digo limpo** e leg√≠vel\n- üìù **Coment√°rios √∫teis** (n√£o √≥bvios)\n- üß™ **Testes unit√°rios**\n- üìö **Versionamento com Git**\n\n> *"C√≥digo √© escrito uma vez, mas lido muitas vezes"*',
			],
		},
		creative: {
			story: [
				"**Para uma boa hist√≥ria**, considere:\n\n**Elementos essenciais:**\n- üé≠ **Protagonista interessante** com motiva√ß√µes claras\n- ‚öîÔ∏è **Conflito envolvente** que gere tens√£o\n- üéØ **Arco narrativo** com in√≠cio, meio e fim\n\n**Estrutura b√°sica:**\n1. **Setup** - Apresente o mundo e personagens\n2. **Confronto** - Desenvolva o conflito\n3. **Resolu√ß√£o** - Conclua de forma satisfat√≥ria",
				"**Elementos para uma narrativa envolvente:**\n\n**Personagens:**\n- Motiva√ß√µes claras\n- Falhas humanas\n- Crescimento ao longo da hist√≥ria\n\n**Cen√°rio:**\n- Detalhes sensoriais\n- Atmosfera adequada ao tom\n\n**Di√°logos:**\n- Naturais e √∫nicos para cada personagem\n- Revelam personalidade e avan√ßam a trama",
			],
			writing: [
				"**Na escrita criativa**, use os **cinco sentidos**:\n\n- üëÅÔ∏è **Vis√£o**: Cores, formas, movimento\n- üëÇ **Audi√ß√£o**: Sons, m√∫sica, sil√™ncio\n- üëÉ **Olfato**: Aromas que evocam mem√≥rias\n- üëÖ **Paladar**: Sabores que caracterizam momentos\n- ‚úã **Tato**: Texturas, temperatura, sensa√ß√µes\n\n> **Regra de ouro:** *Mostre, n√£o apenas conte*",
				"**Dicas de escrita:**\n\n**Para melhorar:**\n1. üìö **Leia muito** - diferentes g√™neros e estilos\n2. ‚úçÔ∏è **Escreva regularmente** - pratique diariamente\n3. üë• **Aceite feedback** - cr√≠ticas construtivas\n4. üîÑ **Revise sempre** - primeira vers√£o nunca √© a final\n\n**Lembre-se:** *Todo escritor foi iniciante um dia!*",
			],
			default: [
				"**Criatividade flui melhor sem press√£o!** \n\nQue tal come√ßarmos com um **brainstorming livre**?\n\n**T√©cnicas √∫teis:**\n- üß† **Mind mapping**\n- üìù **Escrita livre por 10 minutos**\n- üé≤ **Palavras aleat√≥rias como inspira√ß√£o**\n\n*Qual dire√ß√£o te inspira mais?*",
				"**Para projetos criativos**, recomendo:\n\n**Processo criativo:**\n1. üéØ **Definir objetivo** - O que quer transmitir?\n2. üîç **Pesquisar refer√™ncias** - Inspire-se em outros trabalhos\n3. ‚úèÔ∏è **Esbo√ßar ideias** - N√£o se preocupe com perfei√ß√£o\n4. üîÑ **Iterar e refinar** - Melhore gradualmente\n\n**Qual etapa precisa de mais ajuda?**",
			],
		},
	};

	let category = "general";
	let subcategory = "default";

	if (chatType === "code-assistant") {
		category = "code";
		if (input.includes("javascript") || input.includes("js")) subcategory = "javascript";
		else if (input.includes("react")) subcategory = "react";
	} else if (chatType === "creative-writing") {
		category = "creative";
		if (input.includes("hist√≥ria") || input.includes("story")) subcategory = "story";
		else if (input.includes("escrit") || input.includes("text")) subcategory = "writing";
	} else {
		if (input.includes("ol√°") || input.includes("oi") || input.includes("hello")) subcategory = "greeting";
		else if (input.includes("programa√ß√£o") || input.includes("c√≥digo") || input.includes("code"))
			subcategory = "programming";
	}

	const categoryResponses = responses[category as keyof typeof responses];
	const subcategoryResponses = categoryResponses[subcategory as keyof typeof categoryResponses];
	const randomResponse = subcategoryResponses[Math.floor(Math.random() * subcategoryResponses.length)];

	return `${randomResponse}\n\n---\n\nüí° **Nota:** *Esta √© uma resposta de fallback. Para respostas mais avan√ßadas, configure uma chave de API gratuita do Groq ou Hugging Face.*`;
}

export async function getAIResponse(userInput: string, systemPrompt: string, chatType: string): Promise<string> {
	try {
		const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: `Bearer ${process.env.NEXT_PUBLIC_GROQ_API_KEY || "gsk_demo_key"}`,
			},
			body: JSON.stringify({
				model: "llama3-8b-8192",
				messages: [
					{
						role: "system",
						content: `${systemPrompt}\n\nIMPORTANTE: Responda sempre em portugu√™s brasileiro e use markdown para formatar sua resposta quando apropriado. Use **negrito**, *it√°lico*, \`c√≥digo\`, listas, etc.`,
					},
					{
						role: "user",
						content: userInput,
					},
				],
				max_tokens: 1000,
				temperature: 0.7,
				stream: false,
			}),
		});

		if (!response.ok) {
			throw new Error(`Erro na API: ${response.status}`);
		}

		const data = await response.json();
		return data.choices[0]?.message?.content || "Desculpe, n√£o consegui gerar uma resposta.";
	} catch (error) {
		console.error("Erro ao chamar Groq API:", error);

		try {
			const hfResponse = await fetch("https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${process.env.NEXT_PUBLIC_HF_API_KEY || "hf_demo"}`,
				},
				body: JSON.stringify({
					inputs: `${systemPrompt}\n\nUsu√°rio: ${userInput}\nAssistente:`,
					parameters: {
						max_length: 500,
						temperature: 0.7,
						do_sample: true,
					},
				}),
			});

			if (hfResponse.ok) {
				const hfData = await hfResponse.json();
				return hfData[0]?.generated_text?.split("Assistente:")[1]?.trim() || "Resposta gerada com sucesso!";
			}
		} catch (hfError) {
			console.error("Erro no fallback Hugging Face:", hfError);
		}

		return generateContextualResponse(userInput, chatType);
	}
}
